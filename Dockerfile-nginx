# 1) 빌드 환경(Alpine)에서 Nginx 소스를 받아 빌드
FROM alpine:3.18 AS builder

# 빌드에 필요한 패키지 설치
RUN apk add --no-cache \
    gcc \
    libc-dev \
    make \
    pcre-dev \
    openssl-dev \
    zlib-dev \
    curl \
    perl

# NGINX 버전, 모듈 버전
ENV NGINX_VERSION=1.25.2
ENV NGINX_PURGE_MODULE_VERSION=2.3

# NGINX 소스 다운로드
WORKDIR /tmp
RUN curl -LO http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
RUN tar -zxvf nginx-${NGINX_VERSION}.tar.gz

# proxy_cache_purge(3rd party) 소스 다운로드
RUN curl -LO https://github.com/FRiCKLE/ngx_cache_purge/archive/refs/tags/${NGINX_PURGE_MODULE_VERSION}.tar.gz
RUN tar -zxvf ${NGINX_PURGE_MODULE_VERSION}.tar.gz

# 빌드
WORKDIR /tmp/nginx-${NGINX_VERSION}
RUN ./configure \
    --prefix=/etc/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --sbin-path=/usr/local/sbin/nginx \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_gzip_static_module \
    --with-http_realip_module \
    --add-module=/tmp/ngx_cache_purge-${NGINX_PURGE_MODULE_VERSION}  \
    --without-http_autoindex_module \
    --without-http_fastcgi_module \
    --without-http_uwsgi_module \
    --without-http_scgi_module

RUN make && make install

# 2) 최종 런타임 이미지 생성
FROM alpine:3.18
RUN apk add --no-cache pcre openssl zlib
#RUN apk add --no-cache \
#    pcre \
#    openssl \
#    zlib \

# --------------------------------------------------
# [신규] 1) "nginx" 그룹/유저 생성 (system 계정)
#        홈디렉토리 없이, 로그인 불가
RUN addgroup -S nginx && adduser -S -G nginx \
    -h /nonexistent \
    -s /sbin/nologin \
    nginx

# --------------------------------------------------

COPY --from=builder /etc/nginx /etc/nginx
COPY --from=builder /usr/local/sbin/nginx /usr/local/sbin/nginx

# 기본 설정(예시)
RUN mkdir -p /var/cache/nginx \
    && chown -R nginx:nginx /var/cache/nginx
    # ↑ 캐시 디렉토리를 nginx 유저에게 소유권 부여 (필요시)
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


# docker build -f Dockerfile.nginx -t custom-nginx:1.0 . 필수